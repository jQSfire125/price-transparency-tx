# import librariesimport osimport pandas as pdimport numpy as npimport datetime as dt# must match a reference ontology# path in final version will be /opt/data/dim/concept = pd.read_csv('../../../volumes/data/dim/CONCEPT.csv.gz',                      header=0, sep='\t', low_memory=False)concept = concept[['concept_code', 'concept_id']]concept.drop_duplicates(inplace=True)concept.rename(columns= {'concept_code': 'cpt'}, inplace=True)# make a control file to iterate through# path in final version will be /opt/data/raw/path = '../../../volumes/data/raw/'files = os.listdir(path)csv_files = [x for x in files if x.endswith(".json.gz")]# removes '.json.gz' (8 characters)hospital_ids = [int(x[:-8]) for x in csv_files] control = pd.DataFrame({'file': csv_files, 'hospital_id': hospital_ids})#cross reference the control file with the static dimension table# path in final version will be /opt/dta/dim/dim = pd.read_csv('../../../volumes/data/dim/hospital.csv',                  usecols=['hospital_id', 'affiliation'])control = control.merge(dim, how= 'left', on='hospital_id')control.sort_values(by='hospital_id', inplace=True, ignore_index=True)## loop PENDING# print file you are working on now# replace 0 with i in loopprint(dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S") +       ' - parsing hospital - ' + str(control.hospital_id[0]))# read in the data# replace 0 with i in loopdf = pd.read_json('../../../volumes/data/raw/' + control.file[0])# cash price# replace 0 with i in loopcash = df.loc[df.TabName == 'Hosp Discounted Cash Price']cash = pd.DataFrame({    'hospital_id': control.hospital_id[0],    'cpt': cash['Code'],    'price': 'cash',    'amount': cash[' Inpatient Discounted Charge ']})cash.drop_duplicates(inplace=True)# clean cash dataframecash['amount'] = cash['amount'].str.strip()cash['amount'] = cash['amount'].str.replace(',', '', regex=False)cash['amount'] = cash['amount'].str.replace('[$]', '', regex=False)cash['amount'] = cash.amount.astype(float)cash['cpt'] = cash['cpt'].str.upper().replace('[^A-Z0-9]', '', regex=True)cash['cpt'] = cash['cpt'].str.replace('CPT', '', regex=False)# must match a reference code, usually CPT or HCPCScash = cash.merge(concept, on='cpt', sort=True)cash = cash.drop('cpt', axis=1)cash.dropna(subset=['amount'], inplace=True)cash = cash[cash.amount > 0]cash = cash[cash.columns[[0,3,1,2]]]# maximum price# replace 0 with i in loopmaxi = df.loc[(df.TabName == 'Hosp Deidentified Payor MinMax ') & (df['Min /Max'] == 'MAX')]maxi = pd.DataFrame({    'hospital_id': control.hospital_id[0],    'cpt': maxi['Code'],    'price': 'max',    'amount': maxi[' Inpatient Negotiated Charge ']})maxi.drop_duplicates(inplace=True)# clean maximum dataframemaxi['amount'] = maxi['amount'].str.strip()maxi['amount'] = maxi['amount'].str.replace(',', '', regex=False)maxi['amount'] = maxi['amount'].str.replace('[$]', '', regex=False)# some values ended up being an empty stringmaxi.loc[maxi['amount'] == '', 'amount'] = np.nan# convert to floatmaxi['amount'] = maxi.amount.astype(float)# continue cleaningmaxi['cpt'] = maxi['cpt'].str.upper().replace('[^A-Z0-9]', '', regex=True)maxi['cpt'] = maxi['cpt'].str.replace('CPT', '', regex=False)# must match a reference code, usually CPT or HCPCSmaxi = maxi.merge(concept, on='cpt', sort=True)maxi = maxi.drop('cpt', axis=1)maxi.dropna(subset=['amount'], inplace=True)maxi = maxi[maxi.amount > 0]maxi = maxi[maxi.columns[[0,3,1,2]]]# minimum price# replace 0 with i in loopmini = df.loc[(df.TabName == 'Hosp Deidentified Payor MinMax ') & (df['Min /Max'] == 'MIN')]mini = pd.DataFrame({    'hospital_id': control.hospital_id[0],    'cpt': mini['Code'],    'price': 'min',    'amount': mini[' Inpatient Negotiated Charge ']})mini.drop_duplicates(inplace=True)# clean minimum pricemini['amount'] = mini['amount'].str.strip()mini['amount'] = mini['amount'].str.replace(',', '', regex=False)mini['amount'] = mini['amount'].str.replace('[$]', '', regex=False)# some values ended up being an empty stringmini.loc[mini['amount'] == '', 'amount'] = np.nan# convert to floatmini['amount'] = mini.amount.astype(float)# continue cleaningmini['cpt'] = mini['cpt'].str.upper().replace('[^A-Z0-9]', '', regex=True)mini['cpt'] = mini['cpt'].str.replace('CPT', '', regex=False)# must match a reference code, usually CPT or HCPCSmini = mini.merge(concept, on='cpt', sort=True)mini = mini.drop('cpt', axis=1)mini.dropna(subset=['amount'], inplace=True)mini = mini[mini.amount > 0]mini = mini[mini.columns[[0,3,1,2]]]out = pd.concat([mini, maxi, cash])# if out is not Null loop# write the data to a flatfile for postgres# path will be later /opt/data/transformed/# replace 0 with i inside the loopif out.shape[0] > 0:    out_path = '../../../volumes/data/transformed/' + str(control.hospital_id[0]) + '.csv'    out.to_csv(out_path, header=False, index=None)# clear variables from last iteration (inside the loop)# del out# del cash# del maxi# del mini