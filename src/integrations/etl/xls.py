# import librariesimport osimport pandas as pdimport numpy as npimport datetime as dt# must match a reference ontologyconcept = pd.read_csv('/opt/data/dim/CONCEPT.csv.gz',                      header=0, sep='\t', low_memory=False)concept = concept[['concept_code', 'concept_id']]concept.drop_duplicates(inplace=True)concept.rename(columns= {'concept_code': 'cpt'}, inplace=True)# make a control file to iterate throughpath = '/opt/data/raw/'files = os.listdir(path)csv_files = [x for x in files if x.endswith(".xlsx")]# removes '.xlsx' (5 characters)hospital_ids = [int(x[:-5]) for x in csv_files] control = pd.DataFrame({'file': csv_files, 'hospital_id': hospital_ids})#cross reference the control file with the static dimension tabledim = pd.read_csv('/opt/data/dim/hospital.csv',                  usecols=['hospital_id', 'affiliation'])control = control.merge(dim, how= 'left', on='hospital_id')control.sort_values(by='hospital_id', inplace=True, ignore_index=True)# Ascencion is a group of hospitalsAscencion =  list(range(2,8)) + [32, 33]for i in range(control.shape[0]):      out = None    # print file you are working on now    print(dt.datetime.now().strftime("%Y-%m-%d %H:%M:%S") +               ' - parsing hospital - ' + str(control.hospital_id[i]))            if control.hospital_id[i] in Ascencion:         # read in the data        df = pd.read_excel('/opt/data/raw/' + control.file[i],                           sheet_name=2, skiprows=2)                # hospital specific configuration        out = pd.DataFrame({            'cpt': df['CPT'].astype(str),            'max': df['Max_Negotiated_Rate'],            'min': df['Min_Negotiated_Rate']            })        out.drop_duplicates(inplace=True)        out['cpt'] = out['cpt'].str.replace('.0', '', regex=False)            elif control.hospital_id[i] in [54]:         # read in the data        df = pd.read_excel('/opt/data/raw/' + control.file[i],                           skiprows=3)                # hospital specific configuration        out = pd.DataFrame({            'cpt': df['CPT/HCPCS Code'],            'gross': df['Inpatient Default Gross Charge'],            'cash': df['Discounted Cash Price']            })        out.drop_duplicates(inplace=True)    elif control.hospital_id[i] in [59]:         # read in the data        df = pd.read_excel('/opt/data/raw/' + control.file[i],                           sheet_name=2, skiprows=2)                # hospital specific configuration        out = pd.DataFrame({            'cpt': df['Procedure Code'],            'gross': df['Gross Charges'],            'max': df['De-identified Maximum'],            'min': df['De-identified Minimum']            })        out.drop_duplicates(inplace=True)    elif control.hospital_id[i] in [74]:         # read in the data        df = pd.read_excel('/opt/data/raw/' + control.file[i])                # hospital specific configuration        out = pd.DataFrame({            'cpt': df['CPT'],            'gross': df['GROSS CHARGES'],            'cash': df['SELF PAY CASH PRICE'],            'max': df['MAX NEGOTIATED RATE'],            'min': df['MIN NEGOTIATED RATE']            })        out.drop_duplicates(inplace=True)            elif control.hospital_id[i] in [75]:         # read in the data        df = pd.read_excel('/opt/data/raw/' + control.file[i])                # hospital specific configuration        out = pd.DataFrame({            'cpt': df['HCPCS_CODE'],            'gross': df['CHARGES'],            'cash': df['CASH_AMOUNT']            })        out.drop_duplicates(inplace=True)    # Check if out was created in the previous step    if out is not None:        # uniform        out.dropna(subset=['cpt'], inplace=True)        out = out[out.cpt != '']        out = out[out.cpt != '*']                # must match a reference code, usually CPT or HCPCS        out = out.merge(concept, on='cpt', sort=True)        out = out.drop('cpt', axis=1)                # melt from wide to long, and clean        long = pd.melt(out, id_vars='concept_id')                # skips transformation if values are already float        if long.value.dtypes not in ('float64', 'int64'):            long['value'] = long['value'].str.replace('[,-]', '', regex=True)            long['value'] = long['value'].str.replace('[$]', '', regex=True)            long['value'] = long['value'].str.replace('[A-Za-z]', '', regex=True)            long['value'] = long['value'].str.strip()            # some values end up being an empty string            long.loc[long['value'] == '', 'value'] = np.nan             long['value'] = long.value.astype(float)        long.dropna(subset=['value'], inplace=True)        long = long[long.value > 0]                # Add hospital id and order columns        long['hospital_id'] = control.hospital_id[i]        long = long[long.columns[[3,0,1,2]]]                # write the data to a flatfile for postgres        if long.shape[0] > 0:            out_path = 'opt/data/transformed/' + str(control.hospital_id[i]) + '.csv'            long.to_csv(out_path, header=False, index=None)                # clear variables from last iteration (inside the loop)        del out        del long